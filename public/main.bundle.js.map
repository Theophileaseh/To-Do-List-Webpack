{"version":3,"file":"main.bundle.js","mappings":"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,CAAC;MACtC;IACF;;IAEApB,YAAY,CAACC,OAAO,CAAC,UAAU,EAAEC,IAAI,CAACC,SAAS,CAAC5B,SAAS,CAAC,CAAC;EAC7D;AACF,CAAC,CAAC;;AAEF;;AAEA6B,MAAM,CAAC0B,iBAAiB,GAAG,YAAM;EAC/BvD,SAAS,GAAGA,SAAS,CAACe,MAAM,CAAC,UAACC,IAAI;IAAA,OAAKA,IAAI,CAACH,WAAW,KAAK,IAAI;EAAA,EAAC;EACjEZ,OAAO,EAAE;AACX,CAAC;;AAED;;AAEA4B,MAAM,CAAC2B,OAAO,GAAG,YAAM;EACrB3B,MAAM,CAAC4B,OAAO,CAACC,EAAE,CAAC,CAAC,CAAC;AACtB,CAAC;;AAED;;;;;;;;;;AC7HA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,iBAAiB;AACjB;AACA;;AAEA,iBAAiB,QAAa;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf,MAAM;AACN,eAAe;AACf;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,WAAW;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,YAAY;AACZ;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,UAAU;AACV;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;;AAEA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,iCAAiC,mBAAmB;AACpD;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,kBAAkB;;AAElB;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,yBAAyB,gBAAgB;AACzC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,aAAa;AACb;AACA;;AAEA;AACA,aAAa;AACb;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,KAAK;;AAEL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,+CAA+C,QAAQ;AACvD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA;;AAEA,YAAY;AACZ;AACA;AACA;;AAEA,YAAY;AACZ;AACA;AACA;;AAEA,YAAY;AACZ;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA,+CAA+C,QAAQ;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,QAAQ;AACR;AACA;;AAEA;AACA,KAAK;;AAEL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA,QAAQ;AACR;AACA;AACA,KAAK;;AAEL;AACA,+CAA+C,QAAQ;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA,+CAA+C,QAAQ;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,SAAS,qBAAM,gBAAgB,qBAAM;AACrC;AACA;AACA;;;;;;;UChpBA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;WACA;WACA;WACA;WACA,GAAG;WACH;WACA;WACA,CAAC;;;;;WCPD;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;UENA;UACA;UACA;UACA;UACA","sources":["webpack://leaderboard/./src/index.js","webpack://leaderboard/./src/modules/formsubmit.js","webpack://leaderboard/./src/modules/storage.js","webpack://leaderboard/./node_modules/babel-regenerator-runtime/runtime.js","webpack://leaderboard/webpack/bootstrap","webpack://leaderboard/webpack/runtime/define property getters","webpack://leaderboard/webpack/runtime/global","webpack://leaderboard/webpack/runtime/hasOwnProperty shorthand","webpack://leaderboard/webpack/runtime/make namespace object","webpack://leaderboard/webpack/before-startup","webpack://leaderboard/webpack/startup","webpack://leaderboard/webpack/after-startup"],"sourcesContent":["import './modules/storage';\nimport './modules/formsubmit';","import { listArray, addList } from './storage';\n\nconst list = document.querySelector('#list');\n\nconst formSubmit = document.querySelector('.form');\n\nfunction alerts(message) {\n  // eslint-disable-next-line no-alert\n  alert(message);\n}\n\nformSubmit.addEventListener('submit', (event) => {\n  const listInput = {\n    list: list.value,\n    isCompleted: false,\n  };\n\n  const result = listArray.filter((elem) => (elem.list === listInput.list));\n\n  if (list.value === '') {\n    event.preventDefault();\n  } else if (result.length !== 0) {\n    alerts('Sorry Task already exists');\n  } else {\n    listArray.push(listInput);\n    addList();\n    list.value = '';\n\n    alerts('Congratulations. Task successfully added!');\n  }\n});\n","const listsList = document.querySelector('.today-lists');\n\nexport let listArray = []; // eslint-disable-line\r\n\n/* eslint-disable no-unused-vars */\n\nexport const addList = () => {\n  const allLists = listArray.map(({ list, isCompleted }, index) => (\n\n    `<div class=\"single-list div-style\" id=${index}  isCompleted=${isCompleted}  draggable=\"true\">\n          <form class=\"single-list-form\">\n            <input type=\"checkbox\" class=\"checkbox\">\n            <input type=\"text\" class=\"single-list-input main-inputs\" value=\"${list}\" >\n          </form>\n          <div class=\"single-list-action-button\">\n          <button class = \"delete-btn\" onClick=\"removeList('${list}')\">\n           <i class=\"fa-solid fa-trash-can\"></i></button>\n            <button class = \"move-btn\" >\n            <i class=\"fa-solid fa-ellipsis-vertical\"></i></button>\n          </div>\n        </div>`\n\n  ));\n\n  if (listArray.length === 0) {\n    listsList.innerHTML = '<h3 class=\"no-books-notification\">Sorry there are no tasks available</h3>';\n  } else {\n    listsList.innerHTML = allLists;\n  }\n\n  localStorage.setItem('listData', JSON.stringify(listArray));\n};\n\n/* eslint-disable no-unused-vars */\n\nwindow.removeList = (list) => {\n  listArray = listArray.filter((elem) => elem.list !== list);\n  addList();\n  // console.log('removed');\n};\n\nwindow.addEventListener('DOMContentLoaded', (e) => {\n  const lists = JSON.parse(localStorage.getItem('listData'));\n  if (lists === null) {\n    listArray = [\n      {\n        list: 'wash the dishes',\n      },\n      {\n        list: 'complete To Do list project',\n      },\n    ];\n  } else {\n    listArray = lists;\n  }\n  addList();\n});\n\n// input field of list clicked event\n\nlistsList.addEventListener('focusin', (e) => {\n\n});\n\nlistsList.addEventListener('focusout', (e) => {\n  const inputValue = e.target.value;\n  const { id } = e.target.parentNode.parentNode;\n\n  listArray.forEach((listItem, index) => {\n    listArray[id].list = inputValue;\n  });\n\n  localStorage.setItem('listData', JSON.stringify(listArray));\n});\n\n// load window event\n\nwindow.addEventListener('load', (e) => {\n  const allTexts = document.querySelectorAll('[isCompleted=true]');\n\n  allTexts.forEach((items) => {\n    items.childNodes[1][0].setAttribute('checked', 'true');\n    items.childNodes[1][1].setAttribute('disabled', 'true');\n    items.childNodes[1][1].classList.add('line-through');\n  });\n});\n\n// checkbox event\nconst checkbox = document.querySelector('.checkbox');\nlistsList.addEventListener('change', (e) => {\n  if (e.target.className.includes('checkbox')) {\n    const { checked } = e.target;\n    const text = e.target.parentNode.querySelector('.single-list-input');\n    const listValue = e.target.parentNode.querySelector('.single-list-input').value;\n    const { id } = e.target.parentNode.parentNode;\n\n    if (checked) {\n      listArray[id].isCompleted = true;\n      //  listArray[id].list = listValue;\n      text.classList.add('line-through');\n      text.setAttribute('disabled', 'true');\n    } else {\n      text.classList.remove('line-through');\n      listArray[id].isCompleted = false;\n      text.setAttribute('disabled', 'false');\n      //  listArray[id].list = listValue;\n    }\n\n    localStorage.setItem('listData', JSON.stringify(listArray));\n  }\n});\n\n// Remove completed list\n\nwindow.removeIsCompleted = () => {\n  listArray = listArray.filter((elem) => elem.isCompleted !== true);\n  addList();\n};\n\n// Refresh window\n\nwindow.refresh = () => {\n  window.history.go(0);\n};\n\n// draggable\n","/**\n * Copyright (c) 2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * https://raw.github.com/facebook/regenerator/master/LICENSE file. An\n * additional grant of patent rights can be found in the PATENTS file in\n * the same directory.\n */\n\n!(function(global) {\n  \"use strict\";\n\n  var hasOwn = Object.prototype.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var iteratorSymbol =\n    typeof Symbol === \"function\" && Symbol.iterator || \"@@iterator\";\n\n  var inModule = typeof module === \"object\";\n  var runtime = global.regeneratorRuntime;\n  if (runtime) {\n    if (inModule) {\n      // If regeneratorRuntime is defined globally and we're in a module,\n      // make the exports object identical to regeneratorRuntime.\n      module.exports = runtime;\n    }\n    // Don't bother evaluating the rest of this file if the runtime was\n    // already defined globally.\n    return;\n  }\n\n  // Define the runtime globally (as expected by generated code) as either\n  // module.exports (if we're in a module) or a new, empty object.\n  runtime = global.regeneratorRuntime = inModule ? module.exports : {};\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided, then outerFn.prototype instanceof Generator.\n    var generator = Object.create((outerFn || Generator).prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  runtime.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype;\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunction.displayName = \"GeneratorFunction\";\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      prototype[method] = function(arg) {\n        return this._invoke(method, arg);\n      };\n    });\n  }\n\n  runtime.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  runtime.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `value instanceof AwaitArgument` to determine if the yielded value is\n  // meant to be awaited. Some may consider the name of this method too\n  // cutesy, but they are curmudgeons.\n  runtime.awrap = function(arg) {\n    return new AwaitArgument(arg);\n  };\n\n  function AwaitArgument(arg) {\n    this.arg = arg;\n  }\n\n  function AsyncIterator(generator) {\n    // This invoke function is written in a style that assumes some\n    // calling function (or Promise) will handle exceptions.\n    function invoke(method, arg) {\n      var result = generator[method](arg);\n      var value = result.value;\n      return value instanceof AwaitArgument\n        ? Promise.resolve(value.arg).then(invokeNext, invokeThrow)\n        : Promise.resolve(value).then(function(unwrapped) {\n            // When a yielded Promise is resolved, its final value becomes\n            // the .value of the Promise<{value,done}> result for the\n            // current iteration. If the Promise is rejected, however, the\n            // result for this iteration will be rejected with the same\n            // reason. Note that rejections of yielded Promises are not\n            // thrown back into the generator function, as is the case\n            // when an awaited Promise is rejected. This difference in\n            // behavior between yield and await is important, because it\n            // allows the consumer to decide what to do with the yielded\n            // rejection (swallow it and continue, manually .throw it back\n            // into the generator, abandon iteration, whatever). With\n            // await, by contrast, there is no opportunity to examine the\n            // rejection reason outside the generator function, so the\n            // only option is to throw it from the await expression, and\n            // let the generator function handle the exception.\n            result.value = unwrapped;\n            return result;\n          });\n    }\n\n    if (typeof process === \"object\" && process.domain) {\n      invoke = process.domain.bind(invoke);\n    }\n\n    var invokeNext = invoke.bind(generator, \"next\");\n    var invokeThrow = invoke.bind(generator, \"throw\");\n    var invokeReturn = invoke.bind(generator, \"return\");\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return invoke(method, arg);\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : new Promise(function (resolve) {\n          resolve(callInvokeWithMethodAndArg());\n        });\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  runtime.async = function(innerFn, outerFn, self, tryLocsList) {\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList)\n    );\n\n    return runtime.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          if (method === \"return\" ||\n              (method === \"throw\" && delegate.iterator[method] === undefined)) {\n            // A return or throw (when the delegate iterator has no throw\n            // method) always terminates the yield* loop.\n            context.delegate = null;\n\n            // If the delegate iterator has a return method, give it a\n            // chance to clean up.\n            var returnMethod = delegate.iterator[\"return\"];\n            if (returnMethod) {\n              var record = tryCatch(returnMethod, delegate.iterator, arg);\n              if (record.type === \"throw\") {\n                // If the return method threw an exception, let that\n                // exception prevail over the original return or throw.\n                method = \"throw\";\n                arg = record.arg;\n                continue;\n              }\n            }\n\n            if (method === \"return\") {\n              // Continue with the outer return, now that the delegate\n              // iterator has been terminated.\n              continue;\n            }\n          }\n\n          var record = tryCatch(\n            delegate.iterator[method],\n            delegate.iterator,\n            arg\n          );\n\n          if (record.type === \"throw\") {\n            context.delegate = null;\n\n            // Like returning generator.throw(uncaught), but without the\n            // overhead of an extra function call.\n            method = \"throw\";\n            arg = record.arg;\n            continue;\n          }\n\n          // Delegate generator ran and handled its own exceptions so\n          // regardless of what the method was, we continue as if it is\n          // \"next\" with an undefined arg.\n          method = \"next\";\n          arg = undefined;\n\n          var info = record.arg;\n          if (info.done) {\n            context[delegate.resultName] = info.value;\n            context.next = delegate.nextLoc;\n          } else {\n            state = GenStateSuspendedYield;\n            return info;\n          }\n\n          context.delegate = null;\n        }\n\n        if (method === \"next\") {\n          context._sent = arg;\n\n          if (state === GenStateSuspendedYield) {\n            context.sent = arg;\n          } else {\n            context.sent = undefined;\n          }\n        } else if (method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw arg;\n          }\n\n          if (context.dispatchException(arg)) {\n            // If the dispatched exception was caught by a catch block,\n            // then let that catch block handle the exception normally.\n            method = \"next\";\n            arg = undefined;\n          }\n\n        } else if (method === \"return\") {\n          context.abrupt(\"return\", arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          var info = {\n            value: record.arg,\n            done: context.done\n          };\n\n          if (record.arg === ContinueSentinel) {\n            if (context.delegate && method === \"next\") {\n              // Deliberately forget the last sent value so that we don't\n              // accidentally pass it on to the delegate.\n              arg = undefined;\n            }\n          } else {\n            return info;\n          }\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(arg) call above.\n          method = \"throw\";\n          arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  runtime.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  runtime.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      this.sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n        return !!caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.next = finallyEntry.finallyLoc;\n      } else {\n        this.complete(record);\n      }\n\n      return ContinueSentinel;\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = record.arg;\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      return ContinueSentinel;\n    }\n  };\n})(\n  // Among the various tricks for obtaining a reference to the global\n  // object, this seems to be the most reliable technique that does not\n  // use indirect eval (which violates Content Security Policy).\n  typeof global === \"object\" ? global :\n  typeof window === \"object\" ? window :\n  typeof self === \"object\" ? self : this\n);\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\n__webpack_require__(\"./node_modules/babel-regenerator-runtime/runtime.js\");\nvar __webpack_exports__ = __webpack_require__(\"./src/index.js\");\n",""],"names":["listArray","addList","list","document","querySelector","formSubmit","alerts","message","alert","addEventListener","event","listInput","value","isCompleted","result","filter","elem","preventDefault","length","push","listsList","allLists","map","index","innerHTML","localStorage","setItem","JSON","stringify","window","removeList","e","lists","parse","getItem","inputValue","target","id","parentNode","forEach","listItem","allTexts","querySelectorAll","items","childNodes","setAttribute","classList","add","checkbox","className","includes","checked","text","listValue","remove","removeIsCompleted","refresh","history","go"],"sourceRoot":""}